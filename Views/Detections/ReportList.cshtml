@{
    ViewData["Title"] = "Report List";
}

<h1>Report List</h1>

<div class="form-group">
    <label>Select Filter Type:</label>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="filterType" id="filterByVideoName" value="videoName" checked>
        <label class="form-check-label" for="filterByVideoName">
            Filter by Video Name
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="filterType" id="filterByTitle" value="title">
        <label class="form-check-label" for="filterByTitle">
            Filter by Title
        </label>
    </div>
</div>

<div class="form-group">
    <label for="videoNameSelect">Select Value:</label>
    <select id="videoNameSelect" class="form-control">
        <!-- Options will be populated via JavaScript -->
    </select>
</div>
<button id="submitButton" class="btn btn-primary">Submit</button>

<div id="reportResult" class="row">
    <!-- Results will be populated here -->
</div>

<!-- Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <img id="modalImage" class="img-fluid" src="" alt="">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const filterTypeRadios = document.querySelectorAll('input[name="filterType"]');
            const videoNameSelect = document.getElementById('videoNameSelect');

            // Load initial data based on the default radio button selection
            loadFilterOptions();

            // Add event listener to radio buttons
            filterTypeRadios.forEach(radio => {
                radio.addEventListener('change', loadFilterOptions);
            });

            function loadFilterOptions() {
                const selectedFilterType = document.querySelector('input[name="filterType"]:checked').value;
                console.log(selectedFilterType);
                let apiUrl = '';

                if (selectedFilterType === 'videoName') {
                    apiUrl = '/Detections/GroupByVideoName';
                } else if (selectedFilterType === 'title') {
                    apiUrl = '/Detections/GroupByTitle';
                }

                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        videoNameSelect.innerHTML = ''; // Clear existing options
                        console.log(data); // данные есть
                        data.forEach(item => {

                            if (selectedFilterType === 'videoName') {
                                console.log(item); // данные есть
                                const option = document.createElement('option');
                                option.value = item.videoName;
                                option.textContent = item.videoName;
                                console.log(option); // теперь должно быть определено
                                videoNameSelect.appendChild(option);
                            } else if (selectedFilterType === 'title') {
                                console.log(item); // данные есть
                                const option = document.createElement('option');
                                option.value = item.title;
                                option.textContent = item.title;
                                console.log(option); // теперь должно быть определено
                                videoNameSelect.appendChild(option);
                            }
                           
                        });
                    });
            }

            // Handle form submission
            document.getElementById('submitButton').addEventListener('click', function () {
                const selectedValue = videoNameSelect.value;
                const selectedFilterType = document.querySelector('input[name="filterType"]:checked').value;
                const requestBody = {};

                if (selectedFilterType === 'videoName') {
                    requestBody.selectedVideoName = selectedValue;
                } else if (selectedFilterType === 'title') {
                    requestBody.selectedTitle = selectedValue;
                }

                console.log(`Sending requestBody:`, requestBody);
                fetch('/Detections/ReportList', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                })
                .then(response => response.json())
                .then(data => {
                    console.log(`Received data:`, data);
                    const reportResult = document.getElementById('reportResult');
                    reportResult.innerHTML = ''; // Clear existing tiles
                    data.forEach(item => {
                        const trimmedVideoName = item.videoName.substring(0, item.videoName.length - 3);
                        const tile = document.createElement('div');
                        tile.className = 'col-md-3'; // Make tiles smaller
                        tile.innerHTML = `
                            <div class="card mb-3 shadow-hover">
                                <img src="/sn/${trimmedVideoName}/${item.imageName}" class="card-img-top" alt="${item.imageName}">
                                <div class="card-body">
                                    <h5 class="card-title">${item.title}</h5>
                                    <p class="card-text"><strong>Class Name:</strong> ${item.className}</p>
                                    <p class="card-text"><strong>Status:</strong> ${item.status}</p>
                                    <p class="card-text"><strong>Critical Level:</strong> ${item.criticalLevel}</p>
                                </div>
                            </div>
                        `;
                        tile.querySelector('.card').addEventListener('click', function () {
                            const modalImage = document.getElementById('modalImage');
                            modalImage.src = `/sn/${trimmedVideoName}/${item.imageName}`;
                            const modal = new bootstrap.Modal(document.getElementById('imageModal'));
                            modal.show();
                        });
                        reportResult.appendChild(tile);
                    });
                });
            });
        });
    </script>
}

    <style>
        .card {
            margin-bottom: 1rem;
            transition: box-shadow 0.3s ease;
        }

        .card-body {
            padding: 0.5rem;
        }

        .card-text {
            margin-bottom: 0.25rem;
            line-height: 1.2;
        }

        .card-img-top {
            height: 150px;
            object-fit: cover;
        }

        .shadow-hover:hover {
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
        }
    </style>
